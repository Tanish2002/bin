#!/bin/bash

# Default step value
DEFAULT_STEP=5
MAX_VOLUME=150

# Detect audio system
if command -v wpctl &>/dev/null; then
	AUDIO_SYSTEM="pipewire"
elif command -v pactl &>/dev/null; then
	AUDIO_SYSTEM="pulseaudio"
else
	echo "No supported audio system detected (PipeWire or PulseAudio)."
	exit 1
fi

# Function to get the current volume
get_volume() {
	if [ "$AUDIO_SYSTEM" = "pipewire" ]; then
		wpctl get-volume @DEFAULT_AUDIO_SINK@ | awk '{print $2 * 100}' | cut -d. -f1
	else
		pacmd list-sinks | grep -A 15 '* index' | awk '/volume: front/{ print $5 }' | sed 's/[%|,]//g'
	fi
}

# Function to check if the sink is muted
is_muted() {
	if [ "$AUDIO_SYSTEM" = "pipewire" ]; then
		if wpctl get-volume @DEFAULT_AUDIO_SINK@ | grep -q "\[MUTED\]"; then
			echo "muted"
		else
			echo "unmuted"
		fi
	else
		muted=$(pacmd list-sinks | grep -A 15 '* index' | awk '/muted:/{ print $2 }')
		if [ "$muted" = "yes" ]; then
			echo "muted"
		else
			echo "unmuted"
		fi
	fi
}

# Function to increase the volume
increase_volume() {
	step=${1:-$DEFAULT_STEP}
	current_volume=$(get_volume)
	new_volume=$((current_volume + step))
	if [ "$new_volume" -gt "$MAX_VOLUME" ]; then
		new_volume=$MAX_VOLUME
	fi
	if [ "$AUDIO_SYSTEM" = "pipewire" ]; then
		wpctl set-volume @DEFAULT_AUDIO_SINK@ "$((new_volume))%" >/dev/null
	else
		pactl set-sink-volume "$(get_active_sink)" "${new_volume}%" >/dev/null
	fi
}

# Function to decrease the volume
decrease_volume() {
	step=${1:-$DEFAULT_STEP}
	if [ "$AUDIO_SYSTEM" = "pipewire" ]; then
		wpctl set-volume @DEFAULT_AUDIO_SINK@ "$step%-" >/dev/null
	else
		pactl set-sink-volume "$(get_active_sink)" "-${step}%" >/dev/null
	fi
}

# Function to set the volume
set_volume() {
	value=$1
	if [ "$value" -gt "$MAX_VOLUME" ]; then
		value=$MAX_VOLUME
	fi
	if [ "$AUDIO_SYSTEM" = "pipewire" ]; then
		wpctl set-volume @DEFAULT_AUDIO_SINK@ "$value%" >/dev/null
	else
		pactl set-sink-volume "$(get_active_sink)" "${value}%" >/dev/null
	fi
}

# Function to toggle mute/unmute
toggle_mute() {
	if [ "$AUDIO_SYSTEM" = "pipewire" ]; then
		wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle >/dev/null
	else
		pactl set-sink-mute "$(get_active_sink)" toggle >/dev/null
	fi
}

# Function to output the volume or mute status
output_volume() {
	if [ "$(is_muted)" = "muted" ]; then
		echo "muted"
	else
		get_volume
	fi
}

# Main script logic
case "$1" in
up)
	increase_volume "$2"
	output_volume
	;;
down)
	decrease_volume "$2"
	output_volume
	;;
set)
	if [ -z "$2" ]; then
		echo "Please provide a volume value to set."
		exit 1
	fi
	set_volume "$2"
	output_volume
	;;
toggle)
	toggle_mute
	output_volume
	;;
get)
	output_volume
	;;
*)
	echo "Usage: $0 {up <step>|down <step>|set <value>|toggle|get}"
	exit 1
	;;
esac
